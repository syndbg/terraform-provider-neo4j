name: Go
on:
  push:
    branches:
      - master
    tags:
      - v*
  pull_request:
    branches:
      - master
jobs:
  test:
    name: Test
    strategy:
      matrix:
        golang: ["1.14"]
        os: ["ubuntu-latest", "macos-latest"]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Remove previous jobs
        uses: rokroskar/workflow-run-cleanup-action@master
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
        # NOTE: Don't stop master or tags jobs since they might be uploading assets and result into a partial release
        if: "!startsWith(github.ref, 'refs/tags/') && github.ref != 'refs/heads/master' && matrix.os == 'ubuntu-latest'"

      - name: Set up Go ${{ matrix.golang }}
        uses: actions/setup-go@v1
        with:
          go-version: ${{ matrix.golang }}
        id: go

      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - name: Download golangci-lint
        run: curl -sfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.23.8
        if: "matrix.os == 'ubuntu-latest'"

      - name: Lint
        run: $(go env GOPATH)/bin/golangci-lint run --timeout=10m
        if: "matrix.os == 'ubuntu-latest'"

      - uses: actions/cache@v1
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Test that it's buildable
        run: go build

      - name: Test docker works
        run: docker run --rm hello-world
        # NOTE: Currently Github Action MacOS agents don't have docker installed
        if: "matrix.os == 'ubuntu-latest'"

      - name: Test
        run: go run mage.go -v test
        # NOTE: Currently Github Action MacOS agents don't have docker installed
        if: "matrix.os == 'ubuntu-latest'"

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [test]
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download gox
        run: go get github.com/mitchellh/gox

      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - name: Get Git tag
        id: tag
        run: echo ::set-output name=TAG::${GITHUB_REF#refs/tags/}

      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - name: Build release assets
        run: |
          CGO_ENABLED=0 $(go env GOPATH)/bin/gox \
           -output='build/terraform-provider-neo4j-${{ steps.tag.outputs.TAG }}_{{ .OS }}_{{ .Arch }}' \
           -arch='amd64' \
           -os='linux darwin' \
           -verbose \
           -ldflags "-s -w"

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          draft: false
          prerelease: false
          body: Changelog at https://github.com/syndbg/terraform-provider-neo4j/blob/master/CHANGELOG.md

      # TODO: Replace with glob pattern once `actions/upload-release-asset` supports it
      - uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build/terraform-provider-neo4j-${{ steps.tag.outputs.TAG }}_darwin_amd64
          asset_name: terraform-provider-neo4j-${{ steps.tag.outputs.TAG }}_darwin_amd64
          asset_content_type: application/octet-stream

      # TODO: Replace with glob pattern once `actions/upload-release-asset` supports it
      - uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build/terraform-provider-neo4j-${{ steps.tag.outputs.TAG }}_linux_amd64
          asset_name: terraform-provider-neo4j-${{ steps.tag.outputs.TAG }}_linux_amd64
          asset_content_type: application/octet-stream
